#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:serapeum :bordeaux-threads :lparallel) :silent t))

(defpackage :ros.script.collatz.3787876844
  (:use :cl)
  (:import-from #:bordeaux-threads
                #:make-thread)
  (:import-from #:lparallel
                #:*kernel*
                #:make-kernel
                #:pmap
                #:preduce
                #:psort)
  (:import-from #:lparallel.queue
                #:make-queue
                #:push-queue
                #:pop-queue
                #:queue-count
                #:queue-empty-p)
  (:import-from #:lparallel.cognate
                #:pand)
  (:import-from #:serapeum
                #:iota))
(in-package :ros.script.collatz.3787876844)

(defconstant +1bits+ (1- (ash 1 332)))

(defvar *queue-capacity*  10000000)
(defvar *consumer-data-size* 100000)

(defun rand100 ()
  (random (expt 10 100)))

(declaim (inline collatz))
(defun collatz (value)
  (declare (optimize (speed 3) (space 0) (safety 0))
           (type integer value))
  (do ((size 0 (+ size 1))
       (result value (if (oddp result)
                         (+ (* 3 result) 1)
                         (ash result -1))))
    ((<= result 1) size)))

(defun each-bit-off (x)
  (loop for i below 331
        collect (logand x
                        (logxor +1bits+
                                (ash 1 i)))))

(defvar *queue* (make-queue :fixed-capacity *queue-capacity*))

(declaim (inline bit-off-masks))
(defun bit-off-masks (c)
  (declare (optimize (speed 3) (space 0) (safety 0)))
  (mapcar (lambda (x)
            (logxor +1bits+ (ash 1 x)))
          c))

(defun bit-off-value (c)
  (reduce #'logand (bit-off-masks c) :initial-value +1bits+))

(defun combination-queue (n k)
  ;(declare (optimize (speed 3) (space 0) (safety 0)))
  (labels ((comb (as b k)
             (if (= k 0)
                 (push-queue (bit-off-value b) *queue*)
                 (pmap 'list (lambda (n)
                               (comb (remove n (copy-list as))
                                     (append b (list n))
                                     (1- k)))
                       as))
             nil))
    (comb (iota n) '() k)))

(defun now ()
  (reverse (butlast (multiple-value-list (decode-universal-time (get-universal-time))) 3)))

(defun longer-collatz (max-depth)
  (bordeaux-threads:make-thread
   (lambda ()
     (let ((*kernel* (make-kernel (* 6 3))))
       (loop for i from 1 to max-depth
             do (combination-queue 332 i)
             finally (progn
                       (format t "producer fin.~%")
                       (return t))))))

  (let ((*kernel* (make-kernel (* 6 3))))
    (loop while (queue-empty-p *queue*) do (sleep 0.1))
    (let ((max-number-and-step '(1 . 0)))
      (loop do (progn
                 (let ((numbers (loop for i below *consumer-data-size*
                                      when (not (queue-empty-p *queue*))
                                      collect (pop-queue *queue*))))
                   (let ((numbers-and-steps (pmap 'list (lambda (x)
                                                          (cons x (collatz x)))
                                                  numbers)))
                     (let ((result (preduce #'(lambda (rhs lhs)
                                                (if (> (cdr rhs) (cdr lhs)) rhs lhs))
                                            (append (list max-number-and-step)
                                                    numbers-and-steps))))
                       (when (< (cdr max-number-and-step)
                                (cdr result))
                         (setf max-number-and-step result)
                         (format t "~S~%" (now))
                         (format t "~S~%" result)
                         (sleep 1))))))))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (longer-collatz 3))
;;; vim: set ft=lisp lisp:
