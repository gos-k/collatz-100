#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:serapeum :lparallel) :silent t))

(defpackage :ros.script.collatz.3787876844
  (:use :cl)
  (:import-from #:lparallel
                #:*kernel*
                #:make-kernel
                #:pmap
                #:preduce
                #:psort)
  (:import-from #:lparallel.queue
                #:make-queue
                #:push-queue
                #:pop-queue
                #:queue-count)
  (:import-from #:serapeum
                #:iota))
(in-package :ros.script.collatz.3787876844)

(defconstant +1bits+ (1- (ash 1 332)))

(defun rand100 ()
  (random (expt 10 100)))

(declaim (inline collatz))
(defun collatz (value)
  (declare (optimize (speed 3) (space 0) (safety 0))
           (type integer value)
           (type fixnum size))
  (do ((size 0 (+ size 1))
       (result value (if (oddp result)
                         (+ (* 3 result) 1)
                         (ash result -1))))
    ((<= result 1) size)))

(defun each-bit-off (x)
  (loop for i below 331
        collect (logand x
                        (logxor +1bits+
                                (ash 1 i)))))

(defvar *queue* (make-queue))

(defun combination-queue (n k)
  ;(declare (optimize (speed 3) (space 0) (safety 0)))
  (labels ((comb (as b k)
             (if (= k 0)
                 (push-queue (bit-off-value b) *queue*)
                 (pmap 'list (lambda (n)
                               (comb (remove n (copy-list as))
                                     (append b (list n))
                                     (1- k)))
                       as))
             nil))
    (comb (iota n) '() k)))

(declaim (inline bit-off-masks))
(defun bit-off-masks (c)
  (declare (optimize (speed 3) (space 0) (safety 0)))
  (mapcar (lambda (x)
            (logxor +1bits+ (ash 1 x)))
          c))

(defun bit-off-value (c)
  (reduce (lambda (rhs lhs)
            (logand rhs lhs))
          (bit-off-masks c)
          :initial-value +1bits+))

(defun longer-collatz (max-number-and-step max-depth)
  (loop for i from 1 to max-depth
        do (combination-queue 332 i))
  (let* ((numbers (loop for i below (queue-count *queue*)
                        collect (pop-queue *queue*)))
         (numbers-and-steps (pmap 'list (lambda (x)
                                          (cons x (collatz x)))
                                  numbers))
         (result (preduce #'(lambda (rhs lhs)
                              (if (> (cdr rhs) (cdr lhs)) rhs lhs))
                          (append (list max-number-and-step)
                                  numbers-and-steps))))
    (format t "~A~%" (length numbers))
    (when (< (cdr max-number-and-step)
             (cdr result))
      (format t "~S~%" result))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (make-random-state)
  (let ((*kernel* (make-kernel 12)))
    (longer-collatz '(1 . 0) 2)))
;;; vim: set ft=lisp lisp:
